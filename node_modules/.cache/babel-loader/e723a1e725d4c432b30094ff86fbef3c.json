{"ast":null,"code":"import _objectSpread from \"/home/ulcom19/EmployeeTrackingSystem/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/ulcom19/EmployeeTrackingSystem/src/TrackanEmployee.js\";\nimport React, { Component } from 'react';\nimport './home.css';\nimport Dashboard from './Dashboard';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Popup from \"reactjs-popup\";\nimport firebase from 'firebase'; //import WebMercatorViewport from 'viewport-mercator-project';\n\nimport Geocoder from 'react-map-gl-geocoder';\nimport MapGL, { Marker } from \"react-map-gl\";\nconst token = 'pk.eyJ1IjoicmFqdmVlcm1ld2FyYSIsImEiOiJjazRqZ3lnOXQwdnQ4M25td3Rtb21taTR6In0.e2-bSIPzJvsidBf3gWOnGw'; //const employees = []\n\nclass TrackanEmployee extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      // const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n      //         .fitBounds([[-122.4, 37.7], [-122.5, 37.8]], {\n      //           padding: 20,\n      //           offset: [0, -100]\n      //         });\n      //     const viewport = {\n      //         ...this.state.viewport,\n      //         longitude,\n      //         latitude,\n      //         zoom,\n      //         transitionDuration: 5000,\n      //         transitionInterpolator: new FlyToInterpolator(),\n      //         transitionEasing: d3.easeCubic\n      //     }\n      //     this.setState({viewport});\n      const db = firebase.firestore();\n      let employees = [];\n      db.collection('EmployeeData').get().then(snapshot => {\n        snapshot.forEach(doc => {\n          const data = doc.data();\n          console.log('********', data); //console.log(data)\n          // this.state.Employees.push(data);\n\n          employees.push(data);\n        }); //console.log(employees);\n        // console.log(employees)\n      });\n      console.log('ddddddddddddddddd', employees); // employees.push({\n      //   Address: \"Udaipur\",\n      //   MeetingMsg: \"Your Meeting with Ranjeet Singh on Sun Dec 29 2019 13:35:46 GMT+0530 (India Standard Time) is sheduled and Message from manager jai\",\n      //   PhoneNo: \"123456789\",\n      //   city: \"Udaipur\",\n      //   email: \"chaturvedipankaj2244@gmail.com\",\n      //   firstName: \"Pankaj\",\n      //   lang: '',\n      //   lastName: \"Chaturvedi\",\n      //   lat: ,\n      //   phoneNo: \"9784341957\",\n      //   state: \"Rajasthan\",\n      //   zip: \"313002\",\n      // })\n\n      this.setState({\n        Employees: employees\n      }); //console.log(this.state.Employees)\n    };\n\n    this.mapRef = React.createRef();\n\n    this.handleViewportChange = viewport => {\n      console.log('event', viewport);\n      console.log('this.state.viewPort', this.state.viewport);\n      this.setState({\n        viewport: _objectSpread({}, this.state.viewport, viewport)\n      });\n    };\n\n    this.handleGeocoderViewportChange = viewport => {\n      const geocoderDefaultOverrides = {\n        transitionDuration: 1000\n      };\n      return this.handleViewportChange(_objectSpread({}, viewport, geocoderDefaultOverrides));\n    };\n\n    this.state = {\n      viewport: {\n        width: 1000,\n        height: 900,\n        latitude: 24.5854,\n        longitude: 73.7125,\n        zoom: 6,\n        center: [-96, 37.8]\n      },\n      searchResultLayer: null,\n      Employees: []\n    };\n  }\n\n  render() {\n    console.log(this.state.Employees); // const { viewport, searchResultLayer} = this.state\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"map-cls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(MapGL, Object.assign({\n      ref: this.mapRef\n    }, this.state.viewport, {\n      mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n      width: \"100%\",\n      height: \"90%\",\n      onViewportChange: this.handleViewportChange.bind(this),\n      mapboxApiAccessToken: token,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Geocoder, {\n      mapRef: this.mapRef,\n      onViewportChange: this.handleGeocoderViewportChange,\n      mapboxApiAccessToken: token,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }),\n    /* <div>\n      <Marker latitude={24.5854} longitude={73.7125} offsetLeft={-20} offsetTop={-10}>\n        <div class=\"mapMarkerStyle\"></div>\n      </Marker>\n      <Marker latitude={26.9124} longitude={75.7873} offsetLeft={-20} offsetTop={-10}>\n        <div class=\"mapMarkerStyle\"></div>\n      </Marker>\n    </div> */\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, this.state.Employees && this.state.Employees.filter(item => item.lang !== '' && item.lat !== '').map((emp, index) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      key: index,\n      latitude: emp.lat,\n      longitude: emp.lang,\n      offsetLeft: -20,\n      offsetTop: -10,\n      onClick: () => console.log('dfsgsdfffffffffffff'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mapMarkerStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))))))), React.createElement(Dashboard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TrackanEmployee;","map":{"version":3,"sources":["/home/ulcom19/EmployeeTrackingSystem/src/TrackanEmployee.js"],"names":["React","Component","Dashboard","Popup","firebase","Geocoder","MapGL","Marker","token","TrackanEmployee","constructor","props","componentDidMount","db","firestore","employees","collection","get","then","snapshot","forEach","doc","data","console","log","push","setState","Employees","mapRef","createRef","handleViewportChange","viewport","state","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","width","height","latitude","longitude","zoom","center","searchResultLayer","render","bind","filter","item","lang","lat","map","emp","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,8BAAP;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAGA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,cAA9B;AAIA,MAAMC,KAAK,GAAG,mGAAd,C,CACA;;AAEA,MAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AAEtCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqBnBC,iBArBmB,GAqBC,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAMC,EAAE,GAAGT,QAAQ,CAACU,SAAT,EAAX;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAF,MAAAA,EAAE,CAACG,UAAH,CAAc,cAAd,EACGC,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAEhBA,QAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAI;AACtB,gBAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAb;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB,EAFsB,CAGtB;AACA;;AACAP,UAAAA,SAAS,CAACU,IAAV,CAAeH,IAAf;AACD,SAND,EAFgB,CAShB;AACA;AAED,OAdH;AAeAC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,SAAjC,EAlCwB,CAmCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKW,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAEZ;AAAb,OAAd,EAjDwB,CAkDxB;AAED,KAzEkB;;AAAA,SA4EnBa,MA5EmB,GA4EV5B,KAAK,CAAC6B,SAAN,EA5EU;;AAAA,SA6EnBC,oBA7EmB,GA6EIC,QAAQ,IAAI;AACjCR,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,QAArB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,KAAKQ,KAAL,CAAWD,QAA9C;AACA,WAAKL,QAAL,CAAc;AACZK,QAAAA,QAAQ,oBAAO,KAAKC,KAAL,CAAWD,QAAlB,EAA+BA,QAA/B;AADI,OAAd;AAGD,KAnFkB;;AAAA,SAsFnBE,4BAtFmB,GAsFaF,QAAD,IAAc;AAC3C,YAAMG,wBAAwB,GAAG;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAjC;AAEA,aAAO,KAAKL,oBAAL,mBACFC,QADE,EAEFG,wBAFE,EAAP;AAID,KA7FkB;;AAEjB,SAAKF,KAAL,GAAa;AAEXD,MAAAA,QAAQ,EAAE;AACRK,QAAAA,KAAK,EAAE,IADC;AAERC,QAAAA,MAAM,EAAE,GAFA;AAGRC,QAAAA,QAAQ,EAAE,OAHF;AAIRC,QAAAA,SAAS,EAAE,OAJH;AAKRC,QAAAA,IAAI,EAAE,CALE;AAMRC,QAAAA,MAAM,EAAE,CAAC,CAAC,EAAF,EAAM,IAAN;AANA,OAFC;AAWXC,MAAAA,iBAAiB,EAAE,IAXR;AAYXf,MAAAA,SAAS,EAAE;AAZA,KAAb;AAeD;;AA+EDgB,EAAAA,MAAM,GAAG;AACPpB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKQ,KAAL,CAAWL,SAAvB,EADO,CAEP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,GAAG,EAAE,KAAKC;AADZ,OAEM,KAAKI,KAAL,CAAWD,QAFjB;AAGE,MAAA,QAAQ,EAAC,mCAHX;AAIE,MAAA,KAAK,EAAC,MAJR;AAKE,MAAA,MAAM,EAAC,KALT;AAME,MAAA,gBAAgB,EAAE,KAAKD,oBAAL,CAA0Bc,IAA1B,CAA+B,IAA/B,CANpB;AAOE,MAAA,oBAAoB,EAAEpC,KAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASE,oBAAC,QAAD;AACE,MAAA,MAAM,EAAE,KAAKoB,MADf;AAEE,MAAA,gBAAgB,EAAE,KAAKK,4BAFzB;AAGE,MAAA,oBAAoB,EAAEzB,KAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF;AAgBI;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKwB,KAAL,CAAWL,SAAX,IACC,KAAKK,KAAL,CAAWL,SAAX,CAAqBkB,MAArB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,EAAd,IAAoBD,IAAI,CAACE,GAAL,KAAa,EAArE,EAAyEC,GAAzE,CAA6E,CAACC,GAAD,EAAMC,KAAN,KAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAb;AAAoB,MAAA,QAAQ,EAAED,GAAG,CAACF,GAAlC;AAAuC,MAAA,SAAS,EAAEE,GAAG,CAACH,IAAtD;AAA4D,MAAA,UAAU,EAAE,CAAC,EAAzE;AAA6E,MAAA,SAAS,EAAE,CAAC,EAAzF;AAA6F,MAAA,OAAO,EAAE,MAAMxB,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAFJ,CAxBJ,CADF,CADF,EA8CE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CF,CADF;AAkDD;;AAvJqC;;AA0JxC,eAAef,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport './home.css';\nimport Dashboard from './Dashboard'\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport Popup from \"reactjs-popup\";\nimport firebase from 'firebase';\n//import WebMercatorViewport from 'viewport-mercator-project';\nimport Geocoder from 'react-map-gl-geocoder'\n\n\nimport MapGL, { Marker } from \"react-map-gl\";\n\n\n\nconst token = 'pk.eyJ1IjoicmFqdmVlcm1ld2FyYSIsImEiOiJjazRqZ3lnOXQwdnQ4M25td3Rtb21taTR6In0.e2-bSIPzJvsidBf3gWOnGw';\n//const employees = []\n\nclass TrackanEmployee extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n\n      viewport: {\n        width: 1000,\n        height: 900,\n        latitude: 24.5854,\n        longitude: 73.7125,\n        zoom: 6,\n        center: [-96, 37.8],\n\n      },\n      searchResultLayer: null,\n      Employees: []\n\n    };\n  }\n\n\n\n  componentDidMount = () => {\n    // const {longitude, latitude, zoom} = new WebMercatorViewport(this.state.viewport)\n    //         .fitBounds([[-122.4, 37.7], [-122.5, 37.8]], {\n    //           padding: 20,\n    //           offset: [0, -100]\n    //         });\n    //     const viewport = {\n    //         ...this.state.viewport,\n    //         longitude,\n    //         latitude,\n    //         zoom,\n    //         transitionDuration: 5000,\n    //         transitionInterpolator: new FlyToInterpolator(),\n    //         transitionEasing: d3.easeCubic\n    //     }\n    //     this.setState({viewport});\n\n    const db = firebase.firestore();\n    let employees = [];\n    db.collection('EmployeeData')\n      .get()\n      .then(snapshot => {\n\n        snapshot.forEach(doc => {\n          const data = doc.data()\n          console.log('********', data)\n          //console.log(data)\n          // this.state.Employees.push(data);\n          employees.push(data);\n        })\n        //console.log(employees);\n        // console.log(employees)\n\n      })\n    console.log('ddddddddddddddddd', employees)\n    // employees.push({\n    //   Address: \"Udaipur\",\n    //   MeetingMsg: \"Your Meeting with Ranjeet Singh on Sun Dec 29 2019 13:35:46 GMT+0530 (India Standard Time) is sheduled and Message from manager jai\",\n    //   PhoneNo: \"123456789\",\n    //   city: \"Udaipur\",\n    //   email: \"chaturvedipankaj2244@gmail.com\",\n    //   firstName: \"Pankaj\",\n    //   lang: '',\n    //   lastName: \"Chaturvedi\",\n    //   lat: ,\n    //   phoneNo: \"9784341957\",\n    //   state: \"Rajasthan\",\n    //   zip: \"313002\",\n    // })\n    this.setState({ Employees: employees })\n    //console.log(this.state.Employees)\n\n  }\n\n\n  mapRef = React.createRef()\n  handleViewportChange = viewport => {\n    console.log('event', viewport)\n    console.log('this.state.viewPort', this.state.viewport);\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    })\n  }\n\n  // if you are happy with Geocoder default settings, you can just use handleViewportChange directly\n  handleGeocoderViewportChange = (viewport) => {\n    const geocoderDefaultOverrides = { transitionDuration: 1000 }\n\n    return this.handleViewportChange({\n      ...viewport,\n      ...geocoderDefaultOverrides\n    })\n  }\n\n\n  render() {\n    console.log(this.state.Employees);\n    // const { viewport, searchResultLayer} = this.state\n    return (\n      <div>\n        <div className=\"map-cls\">\n          <MapGL\n            ref={this.mapRef}\n            {...this.state.viewport}\n            mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n            width=\"100%\"\n            height=\"90%\"\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={token}\n          >\n            <Geocoder\n              mapRef={this.mapRef}\n              onViewportChange={this.handleGeocoderViewportChange}\n              mapboxApiAccessToken={token}\n            ></Geocoder>\n\n            {\n              /* <div>\n                <Marker latitude={24.5854} longitude={73.7125} offsetLeft={-20} offsetTop={-10}>\n                  <div class=\"mapMarkerStyle\"></div>\n                </Marker>\n                <Marker latitude={26.9124} longitude={75.7873} offsetLeft={-20} offsetTop={-10}>\n                  <div class=\"mapMarkerStyle\"></div>\n                </Marker>\n              </div> */\n              <div>\n                {this.state.Employees &&\n                  this.state.Employees.filter(item => item.lang !== '' && item.lat !== '').map((emp, index) => (\n                    <div>\n                      <Marker key={index} latitude={emp.lat} longitude={emp.lang} offsetLeft={-20} offsetTop={-10} onClick={() => console.log('dfsgsdfffffffffffff')}>\n                        <div className=\"mapMarkerStyle\"></div>\n                      </Marker>\n                    </div>\n                  ))}\n              </div>\n            }\n\n\n\n\n\n          </MapGL>\n\n\n        </div>\n        <Dashboard />\n      </div>\n    )\n  }\n}\n\nexport default TrackanEmployee;"]},"metadata":{},"sourceType":"module"}