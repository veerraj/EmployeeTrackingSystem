{"version":3,"sources":["../../../src/components/geolocate-control.js"],"names":["LINEAR_TRANSITION_PROPS","Object","assign","TransitionManager","defaultProps","transitionDuration","noop","propTypes","BaseControl","className","PropTypes","string","style","object","label","positionOptions","fitBoundsOptions","trackUserLocation","bool","showUserLocation","onViewStateChange","func","onViewportChange","GeolocateControl","supportsGeolocation","markerPosition","console","warn","controlOptions","forEach","prop","props","_mapboxGeolocateControl","mapboxgl","_watchState","_geolocateButton","_geolocateButtonRef","current","_updateMarker","_updateCamera","_setup","_map","_context","map","on","trigger","position","setState","coords","center","LngLat","longitude","latitude","radius","accuracy","bounds","toBounds","_ne","lng","lat","_sw","viewport","_getBounds","WebMercatorViewport","fitBounds","zoom","newViewState","mapState","MapState","viewState","getViewportProps","type","callback","state","e","preventDefault","then","result","_setupMapboxGeolocateControl","geolocationWatchID","_geolocationWatchID","undefined","window","navigator","geolocation","clearWatch","_renderMarker","_containerRef","_renderButton","_onClickGeolocate"],"mappings":"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","sourcesContent":["// @flow\n\n/* global window */\nimport React, {createRef} from 'react';\nimport PropTypes from 'prop-types';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport mapboxgl from '../utils/mapboxgl';\n\nimport BaseControl from './base-control';\nimport Marker from './marker';\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport {isGeolocationSupported} from '../utils/geolocate-utils';\n\nimport type {BaseControlProps} from './base-control';\n\nconst LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nconst noop = () => {};\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  // Custom label assigned to the control\n  label: PropTypes.string,\n\n  // mapbox geolocate options\n  // https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  style: {},\n  label: 'Geolocate',\n\n  // mapbox geolocate options\n  positionOptions: null,\n  fitBoundsOptions: null,\n  trackUserLocation: false,\n  showUserLocation: true\n});\n\nexport type GeolocateControlProps = BaseControlProps & {\n  className: string,\n  style: Object,\n  label: string,\n  positionOptions: any,\n  fitBoundsOptions: any,\n  trackUserLocation: boolean,\n  showUserLocation: boolean,\n  onViewStateChange?: Function,\n  onViewportChange?: Function\n};\n\ntype Coordinate = {\n  longitude: number,\n  latitude: number,\n  accuracy: number\n};\ntype Position = {\n  coords: Coordinate\n};\ntype State = {\n  supportsGeolocation: boolean,\n  markerPosition: ?Coordinate\n};\ntype GeolocateControlOptions = {\n  positionOptions?: any,\n  fitBoundsOptions?: any,\n  trackUserLocation?: boolean,\n  showUserLocation?: boolean\n};\n\nexport default class GeolocateControl extends BaseControl<\n  GeolocateControlProps,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    supportsGeolocation: false,\n    markerPosition: null\n  };\n\n  _mapboxGeolocateControl: any = null;\n\n  _geolocateButtonRef: {current: null | HTMLButtonElement} = createRef();\n\n  componentDidMount() {\n    isGeolocationSupported().then(result => {\n      this.setState({supportsGeolocation: result});\n      this._setupMapboxGeolocateControl(result);\n    });\n  }\n\n  componentWillUnmount() {\n    // re-implement MapboxGeolocateControl's _onRemove\n    // clear the geolocation watch if exists\n    if (this._mapboxGeolocateControl) {\n      const geolocationWatchID = this._mapboxGeolocateControl._geolocationWatchID;\n      if (geolocationWatchID !== undefined) {\n        window.navigator.geolocation.clearWatch(geolocationWatchID);\n        this._mapboxGeolocateControl._geolocationWatchID = undefined;\n      }\n    }\n  }\n\n  _setupMapboxGeolocateControl = (supportsGeolocation: boolean) => {\n    if (!supportsGeolocation) {\n      /* eslint-disable no-console, no-undef */\n      console.warn(\n        'Geolocation support is not available, the GeolocateControl will not be visible.'\n      );\n      /* eslint-enable no-console, no-undef */\n      return;\n    }\n\n    // For null option, use Mapbox default value\n    const controlOptions: GeolocateControlOptions = {\n      // disable showUserLocation to avoid Mapbox accessing marker before rendering\n      showUserLocation: false\n    };\n    ['positionOptions', 'fitBoundsOptions', 'trackUserLocation'].forEach(prop => {\n      if (prop in this.props && this.props[prop] !== null) {\n        controlOptions[prop] = this.props[prop];\n      }\n    });\n\n    this._mapboxGeolocateControl = new mapboxgl.GeolocateControl(controlOptions);\n\n    // the following re-implement MapboxGeolocateControl's _setupUI\n    // replace mapbox internal prop\n    this._mapboxGeolocateControl._watchState = 'OFF';\n\n    // replace mapbox internal UI elements\n    this._mapboxGeolocateControl._geolocateButton = this._geolocateButtonRef.current;\n\n    // replace mapbox internal methods\n    this._mapboxGeolocateControl._updateMarker = this._updateMarker;\n    this._mapboxGeolocateControl._updateCamera = this._updateCamera;\n\n    this._mapboxGeolocateControl._setup = true;\n  };\n\n  _onClickGeolocate = () => {\n    this._mapboxGeolocateControl._map = this._context.map;\n\n    if (this.props.showUserLocation) {\n      this._mapboxGeolocateControl.on('geolocate', this._updateMarker);\n      this._mapboxGeolocateControl.on('trackuserlocationend', this._updateMarker);\n    }\n\n    return this._mapboxGeolocateControl.trigger();\n  };\n\n  _updateMarker = (position: Position) => {\n    if (position) {\n      this.setState({markerPosition: position.coords});\n    }\n  };\n\n  _getBounds = (position: Position) => {\n    const center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n    const radius = position.coords.accuracy;\n    const bounds = center.toBounds(radius);\n\n    return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n  };\n\n  _updateCamera = (position: Position) => {\n    const {viewport} = this._context;\n\n    const bounds = this._getBounds(position);\n    const {longitude, latitude, zoom} = new WebMercatorViewport(viewport).fitBounds(bounds);\n\n    const newViewState = Object.assign({}, viewport, {\n      longitude,\n      latitude,\n      zoom\n    });\n    const mapState = new MapState(newViewState);\n    const viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n\n    const onViewportChange = this.props.onViewportChange || this._context.onViewportChange || noop;\n    const onViewStateChange =\n      this.props.onViewStateChange || this._context.onViewStateChange || noop;\n\n    // Call new style callback\n    onViewStateChange({viewState});\n\n    // Call old style callback\n    onViewportChange(viewState);\n  };\n\n  _renderButton = (type: string, label: string, callback: Function) => {\n    return (\n      <button\n        key={type}\n        className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n        ref={this._geolocateButtonRef}\n        type=\"button\"\n        title={label}\n        onClick={callback}\n      />\n    );\n  };\n\n  _renderMarker = () => {\n    const {markerPosition} = this.state;\n    const {showUserLocation} = this.props;\n    if (!markerPosition || !showUserLocation) {\n      return null;\n    }\n\n    return (\n      // $FlowFixMe\n      <Marker\n        key=\"location-maker\"\n        className=\"mapboxgl-user-location-dot\"\n        longitude={markerPosition.longitude}\n        latitude={markerPosition.latitude}\n        onContextMenu={e => e.preventDefault()}\n        captureDrag={false}\n        captureDoubleClick={false}\n      />\n    );\n  };\n\n  _render() {\n    if (!this.state.supportsGeolocation) {\n      return null;\n    }\n\n    const {className, style, label} = this.props;\n    return (\n      <div>\n        {this._renderMarker()}\n        <div\n          key=\"geolocate-control\"\n          className={`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`}\n          ref={this._containerRef}\n          style={style}\n          onContextMenu={e => e.preventDefault()}\n        >\n          {this._renderButton('geolocate', label, this._onClickGeolocate)}\n        </div>\n      </div>\n    );\n  }\n}\n"],"file":"geolocate-control.js"}