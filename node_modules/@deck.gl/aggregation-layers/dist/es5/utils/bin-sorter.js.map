{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","length","defaultGetPoints","bin","defaultGetIndex","index","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","bins","props","sortedBins","_getSortedBins","binMap","_getBinMap","hasFilter","reduce","accu","h","i","filteredPoints","filter","value","undefined","push","Number","isFinite","counts","sort","a","b","percentileRange","len","map","n","lower","upper","lowerIdx","Math","ceil","upperIdx","floor","mapper","curr","Object","assign","Array","isArray","idxRange","_percentileToIndex","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.sortedBins = this._getSortedBins(bins, props);\n    this.binMap = this._getBinMap();\n  }\n\n  /**\n   * Get an array of object with sorted values and index of bins\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  _getSortedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n\n    return bins\n      .reduce((accu, h, i) => {\n        const points = getPoints(h);\n        const index = getIndex(h);\n\n        const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n        h.filteredPoints = hasFilter ? filteredPoints : null;\n\n        const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n        if (value !== null && value !== undefined) {\n          // filter bins if value is null or undefined\n          accu.push({\n            i: Number.isFinite(index) ? index : i,\n            value,\n            counts: filteredPoints.length\n          });\n        }\n\n        return accu;\n      }, [])\n      .sort((a, b) => a.value - b.value);\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to sortedBins\n   */\n  _getBinMap() {\n    return this.sortedBins.reduce(\n      (mapper, curr) =>\n        Object.assign(mapper, {\n          [curr.i]: curr\n        }),\n      {}\n    );\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"],"file":"bin-sorter.js"}