{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","length","clamp","getQuantileDomain","getOrdinalDomain","defaultGetPoints","bin","defaultGetIndex","index","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","constructor","bins","props","sortedBins","_getSortedBins","binMap","_getBinMap","hasFilter","reduce","accu","h","i","filteredPoints","filter","value","undefined","push","Number","isFinite","counts","sort","a","b","_percentileToIndex","percentileRange","len","lower","upper","map","n","lowerIdx","Math","ceil","upperIdx","floor","mapper","curr","Object","assign","getValueRange","Array","isArray","idxRange","getValueDomainByScale","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.sortedBins = this._getSortedBins(bins, props);\n    this.binMap = this._getBinMap();\n  }\n\n  /**\n   * Get an array of object with sorted values and index of bins\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  _getSortedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n\n    return bins\n      .reduce((accu, h, i) => {\n        const points = getPoints(h);\n        const index = getIndex(h);\n\n        const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n        h.filteredPoints = hasFilter ? filteredPoints : null;\n\n        const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n        if (value !== null && value !== undefined) {\n          // filter bins if value is null or undefined\n          accu.push({\n            i: Number.isFinite(index) ? index : i,\n            value,\n            counts: filteredPoints.length\n          });\n        }\n\n        return accu;\n      }, [])\n      .sort((a, b) => a.value - b.value);\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to sortedBins\n   */\n  _getBinMap() {\n    return this.sortedBins.reduce(\n      (mapper, curr) =>\n        Object.assign(mapper, {\n          [curr.i]: curr\n        }),\n      {}\n    );\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"],"file":"bin-sorter.js"}