const defaultGetValue = points => points.length;

import { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';

const defaultGetPoints = bin => bin.points;

const defaultGetIndex = bin => bin.index;

const defaultProps = {
  getValue: defaultGetValue,
  getPoints: defaultGetPoints,
  getIndex: defaultGetIndex,
  filterData: null
};
export default class BinSorter {
  constructor(bins = [], props = defaultProps) {
    this.sortedBins = this._getSortedBins(bins, props);
    this.binMap = this._getBinMap();
  }

  _getSortedBins(bins, props) {
    const {
      getValue = defaultGetValue,
      getPoints = defaultGetPoints,
      getIndex = defaultGetIndex,
      filterData
    } = props;
    const hasFilter = typeof filterData === 'function';
    return bins.reduce((accu, h, i) => {
      const points = getPoints(h);
      const index = getIndex(h);
      const filteredPoints = hasFilter ? points.filter(filterData) : points;
      h.filteredPoints = hasFilter ? filteredPoints : null;
      const value = filteredPoints.length ? getValue(filteredPoints) : null;

      if (value !== null && value !== undefined) {
        accu.push({
          i: Number.isFinite(index) ? index : i,
          value,
          counts: filteredPoints.length
        });
      }

      return accu;
    }, []).sort((a, b) => a.value - b.value);
  }

  _percentileToIndex(percentileRange) {
    const len = this.sortedBins.length;

    if (len < 2) {
      return [0, 0];
    }

    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));
    const lowerIdx = Math.ceil(lower / 100 * (len - 1));
    const upperIdx = Math.floor(upper / 100 * (len - 1));
    return [lowerIdx, upperIdx];
  }

  _getBinMap() {
    return this.sortedBins.reduce((mapper, curr) => Object.assign(mapper, {
      [curr.i]: curr
    }), {});
  }

  getValueRange(percentileRange) {
    if (!this.sortedBins.length) {
      return [];
    }

    let lowerIdx = 0;
    let upperIdx = this.sortedBins.length - 1;

    if (Array.isArray(percentileRange)) {
      const idxRange = this._percentileToIndex(percentileRange);

      lowerIdx = idxRange[0];
      upperIdx = idxRange[1];
    }

    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];
  }

  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {
    if (!this.sortedBins.length) {
      return [];
    }

    const indexEdge = this._percentileToIndex([lower, upper]);

    return this._getScaleDomain(scale, indexEdge);
  }

  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {
    const bins = this.sortedBins;

    switch (scaleType) {
      case 'quantize':
      case 'linear':
        return [bins[lowerIdx].value, bins[upperIdx].value];

      case 'quantile':
        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);

      case 'ordinal':
        return getOrdinalDomain(bins, d => d.value);

      default:
        return [bins[lowerIdx].value, bins[upperIdx].value];
    }
  }

}
//# sourceMappingURL=bin-sorter.js.map